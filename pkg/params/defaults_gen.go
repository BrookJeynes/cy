// Code generated by gen.go; DO NOT EDIT.
package params

import (
	"fmt"

	"github.com/cfoust/cy/pkg/janet"
	"github.com/cfoust/cy/pkg/style"
)

const (
	ParamAnimate           = "animate"
	ParamAnimations        = "animations"
	ParamDataDirectory     = "data-directory"
	ParamDefaultFrame      = "default-frame"
	ParamDefaultShell      = "default-shell"
	ParamNumSearchWorkers  = "num-search-workers"
	ParamRemovePaneOnExit  = "remove-pane-on-exit"
	ParamReplayCopyFg      = "replay-copy-fg"
	ParamReplayPlayFg      = "replay-play-fg"
	ParamReplayStatusBarBg = "replay-status-bar-bg"
	ParamReplayStatusBarFg = "replay-status-bar-fg"
	ParamReplayTimeFg      = "replay-time-fg"
	ParamReplayVisualFg    = "replay-visual-fg"
	ParamSearchStatusBarBg = "search-status-bar-bg"
	ParamSearchStatusBarFg = "search-status-bar-fg"
	ParamSkipInput         = "---skip-input"
	ParamTimestampFormat   = "timestamp-format"
)

func (p *Parameters) Animate() bool {
	value, ok := p.Get(ParamAnimate)
	if !ok {
		return defaults.Animate
	}

	realValue, ok := value.(bool)
	if !ok {
		return defaults.Animate
	}

	return realValue
}

func (p *Parameters) SetAnimate(value bool) {
	p.set(ParamAnimate, value)
}

func (p *Parameters) Animations() []string {
	value, ok := p.Get(ParamAnimations)
	if !ok {
		return defaults.Animations
	}

	realValue, ok := value.([]string)
	if !ok {
		return defaults.Animations
	}

	return realValue
}

func (p *Parameters) SetAnimations(value []string) {
	p.set(ParamAnimations, value)
}

func (p *Parameters) DataDirectory() string {
	value, ok := p.Get(ParamDataDirectory)
	if !ok {
		return defaults.DataDirectory
	}

	realValue, ok := value.(string)
	if !ok {
		return defaults.DataDirectory
	}

	return realValue
}

func (p *Parameters) SetDataDirectory(value string) {
	p.set(ParamDataDirectory, value)
}

func (p *Parameters) DefaultFrame() string {
	value, ok := p.Get(ParamDefaultFrame)
	if !ok {
		return defaults.DefaultFrame
	}

	realValue, ok := value.(string)
	if !ok {
		return defaults.DefaultFrame
	}

	return realValue
}

func (p *Parameters) SetDefaultFrame(value string) {
	p.set(ParamDefaultFrame, value)
}

func (p *Parameters) DefaultShell() string {
	value, ok := p.Get(ParamDefaultShell)
	if !ok {
		return defaults.DefaultShell
	}

	realValue, ok := value.(string)
	if !ok {
		return defaults.DefaultShell
	}

	return realValue
}

func (p *Parameters) SetDefaultShell(value string) {
	p.set(ParamDefaultShell, value)
}

func (p *Parameters) NumSearchWorkers() int {
	value, ok := p.Get(ParamNumSearchWorkers)
	if !ok {
		return defaults.NumSearchWorkers
	}

	realValue, ok := value.(int)
	if !ok {
		return defaults.NumSearchWorkers
	}

	return realValue
}

func (p *Parameters) SetNumSearchWorkers(value int) {
	p.set(ParamNumSearchWorkers, value)
}

func (p *Parameters) RemovePaneOnExit() bool {
	value, ok := p.Get(ParamRemovePaneOnExit)
	if !ok {
		return defaults.RemovePaneOnExit
	}

	realValue, ok := value.(bool)
	if !ok {
		return defaults.RemovePaneOnExit
	}

	return realValue
}

func (p *Parameters) SetRemovePaneOnExit(value bool) {
	p.set(ParamRemovePaneOnExit, value)
}

func (p *Parameters) ReplayCopyFg() *style.Color {
	value, ok := p.Get(ParamReplayCopyFg)
	if !ok {
		return defaults.ReplayCopyFg
	}

	realValue, ok := value.(*style.Color)
	if !ok {
		return defaults.ReplayCopyFg
	}

	return realValue
}

func (p *Parameters) SetReplayCopyFg(value *style.Color) {
	p.set(ParamReplayCopyFg, value)
}

func (p *Parameters) ReplayPlayFg() *style.Color {
	value, ok := p.Get(ParamReplayPlayFg)
	if !ok {
		return defaults.ReplayPlayFg
	}

	realValue, ok := value.(*style.Color)
	if !ok {
		return defaults.ReplayPlayFg
	}

	return realValue
}

func (p *Parameters) SetReplayPlayFg(value *style.Color) {
	p.set(ParamReplayPlayFg, value)
}

func (p *Parameters) ReplayStatusBarBg() *style.Color {
	value, ok := p.Get(ParamReplayStatusBarBg)
	if !ok {
		return defaults.ReplayStatusBarBg
	}

	realValue, ok := value.(*style.Color)
	if !ok {
		return defaults.ReplayStatusBarBg
	}

	return realValue
}

func (p *Parameters) SetReplayStatusBarBg(value *style.Color) {
	p.set(ParamReplayStatusBarBg, value)
}

func (p *Parameters) ReplayStatusBarFg() *style.Color {
	value, ok := p.Get(ParamReplayStatusBarFg)
	if !ok {
		return defaults.ReplayStatusBarFg
	}

	realValue, ok := value.(*style.Color)
	if !ok {
		return defaults.ReplayStatusBarFg
	}

	return realValue
}

func (p *Parameters) SetReplayStatusBarFg(value *style.Color) {
	p.set(ParamReplayStatusBarFg, value)
}

func (p *Parameters) ReplayTimeFg() *style.Color {
	value, ok := p.Get(ParamReplayTimeFg)
	if !ok {
		return defaults.ReplayTimeFg
	}

	realValue, ok := value.(*style.Color)
	if !ok {
		return defaults.ReplayTimeFg
	}

	return realValue
}

func (p *Parameters) SetReplayTimeFg(value *style.Color) {
	p.set(ParamReplayTimeFg, value)
}

func (p *Parameters) ReplayVisualFg() *style.Color {
	value, ok := p.Get(ParamReplayVisualFg)
	if !ok {
		return defaults.ReplayVisualFg
	}

	realValue, ok := value.(*style.Color)
	if !ok {
		return defaults.ReplayVisualFg
	}

	return realValue
}

func (p *Parameters) SetReplayVisualFg(value *style.Color) {
	p.set(ParamReplayVisualFg, value)
}

func (p *Parameters) SearchStatusBarBg() *style.Color {
	value, ok := p.Get(ParamSearchStatusBarBg)
	if !ok {
		return defaults.SearchStatusBarBg
	}

	realValue, ok := value.(*style.Color)
	if !ok {
		return defaults.SearchStatusBarBg
	}

	return realValue
}

func (p *Parameters) SetSearchStatusBarBg(value *style.Color) {
	p.set(ParamSearchStatusBarBg, value)
}

func (p *Parameters) SearchStatusBarFg() *style.Color {
	value, ok := p.Get(ParamSearchStatusBarFg)
	if !ok {
		return defaults.SearchStatusBarFg
	}

	realValue, ok := value.(*style.Color)
	if !ok {
		return defaults.SearchStatusBarFg
	}

	return realValue
}

func (p *Parameters) SetSearchStatusBarFg(value *style.Color) {
	p.set(ParamSearchStatusBarFg, value)
}

func (p *Parameters) SkipInput() bool {
	value, ok := p.Get(ParamSkipInput)
	if !ok {
		return defaults.skipInput
	}

	realValue, ok := value.(bool)
	if !ok {
		return defaults.skipInput
	}

	return realValue
}

func (p *Parameters) SetSkipInput(value bool) {
	p.set(ParamSkipInput, value)
}

func (p *Parameters) TimestampFormat() string {
	value, ok := p.Get(ParamTimestampFormat)
	if !ok {
		return defaults.TimestampFormat
	}

	realValue, ok := value.(string)
	if !ok {
		return defaults.TimestampFormat
	}

	return realValue
}

func (p *Parameters) SetTimestampFormat(value string) {
	p.set(ParamTimestampFormat, value)
}

func (p *Parameters) isDefault(key string) bool {
	switch key {
	case ParamAnimate:
		return true
	case ParamAnimations:
		return true
	case ParamDataDirectory:
		return true
	case ParamDefaultFrame:
		return true
	case ParamDefaultShell:
		return true
	case ParamNumSearchWorkers:
		return true
	case ParamRemovePaneOnExit:
		return true
	case ParamReplayCopyFg:
		return true
	case ParamReplayPlayFg:
		return true
	case ParamReplayStatusBarBg:
		return true
	case ParamReplayStatusBarFg:
		return true
	case ParamReplayTimeFg:
		return true
	case ParamReplayVisualFg:
		return true
	case ParamSearchStatusBarBg:
		return true
	case ParamSearchStatusBarFg:
		return true
	case ParamSkipInput:
		return true
	case ParamTimestampFormat:
		return true

	}
	return false
}

func (p *Parameters) getDefault(key string) (value interface{}, ok bool) {
	switch key {
	case ParamAnimate:
		return defaults.Animate, true
	case ParamAnimations:
		return defaults.Animations, true
	case ParamDataDirectory:
		return defaults.DataDirectory, true
	case ParamDefaultFrame:
		return defaults.DefaultFrame, true
	case ParamDefaultShell:
		return defaults.DefaultShell, true
	case ParamNumSearchWorkers:
		return defaults.NumSearchWorkers, true
	case ParamRemovePaneOnExit:
		return defaults.RemovePaneOnExit, true
	case ParamReplayCopyFg:
		return defaults.ReplayCopyFg, true
	case ParamReplayPlayFg:
		return defaults.ReplayPlayFg, true
	case ParamReplayStatusBarBg:
		return defaults.ReplayStatusBarBg, true
	case ParamReplayStatusBarFg:
		return defaults.ReplayStatusBarFg, true
	case ParamReplayTimeFg:
		return defaults.ReplayTimeFg, true
	case ParamReplayVisualFg:
		return defaults.ReplayVisualFg, true
	case ParamSearchStatusBarBg:
		return defaults.SearchStatusBarBg, true
	case ParamSearchStatusBarFg:
		return defaults.SearchStatusBarFg, true
	case ParamSkipInput:
		return defaults.skipInput, true
	case ParamTimestampFormat:
		return defaults.TimestampFormat, true

	}
	return nil, false
}

func (p *Parameters) setDefault(key string, value interface{}) error {
	janetValue, janetOk := value.(*janet.Value)
	switch key {
	case ParamAnimate:
		if !janetOk {
			realValue, ok := value.(bool)
			if !ok {
				return fmt.Errorf("invalid value for ParamAnimate, should be bool")
			}
			p.set(key, realValue)
			return nil
		}

		var translated bool
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :animate: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamAnimations:
		if !janetOk {
			realValue, ok := value.([]string)
			if !ok {
				return fmt.Errorf("invalid value for ParamAnimations, should be []string")
			}
			p.set(key, realValue)
			return nil
		}

		var translated []string
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :animations: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamDataDirectory:
		if !janetOk {
			realValue, ok := value.(string)
			if !ok {
				return fmt.Errorf("invalid value for ParamDataDirectory, should be string")
			}
			p.set(key, realValue)
			return nil
		}

		var translated string
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :data-directory: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamDefaultFrame:
		if !janetOk {
			realValue, ok := value.(string)
			if !ok {
				return fmt.Errorf("invalid value for ParamDefaultFrame, should be string")
			}
			p.set(key, realValue)
			return nil
		}

		var translated string
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :default-frame: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamDefaultShell:
		if !janetOk {
			realValue, ok := value.(string)
			if !ok {
				return fmt.Errorf("invalid value for ParamDefaultShell, should be string")
			}
			p.set(key, realValue)
			return nil
		}

		var translated string
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :default-shell: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamNumSearchWorkers:
		if !janetOk {
			realValue, ok := value.(int)
			if !ok {
				return fmt.Errorf("invalid value for ParamNumSearchWorkers, should be int")
			}
			p.set(key, realValue)
			return nil
		}

		var translated int
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :num-search-workers: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamRemovePaneOnExit:
		if !janetOk {
			realValue, ok := value.(bool)
			if !ok {
				return fmt.Errorf("invalid value for ParamRemovePaneOnExit, should be bool")
			}
			p.set(key, realValue)
			return nil
		}

		var translated bool
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :remove-pane-on-exit: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamReplayCopyFg:
		if !janetOk {
			realValue, ok := value.(*style.Color)
			if !ok {
				return fmt.Errorf("invalid value for ParamReplayCopyFg, should be *style.Color")
			}
			p.set(key, realValue)
			return nil
		}

		var translated *style.Color
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :replay-copy-fg: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamReplayPlayFg:
		if !janetOk {
			realValue, ok := value.(*style.Color)
			if !ok {
				return fmt.Errorf("invalid value for ParamReplayPlayFg, should be *style.Color")
			}
			p.set(key, realValue)
			return nil
		}

		var translated *style.Color
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :replay-play-fg: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamReplayStatusBarBg:
		if !janetOk {
			realValue, ok := value.(*style.Color)
			if !ok {
				return fmt.Errorf("invalid value for ParamReplayStatusBarBg, should be *style.Color")
			}
			p.set(key, realValue)
			return nil
		}

		var translated *style.Color
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :replay-status-bar-bg: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamReplayStatusBarFg:
		if !janetOk {
			realValue, ok := value.(*style.Color)
			if !ok {
				return fmt.Errorf("invalid value for ParamReplayStatusBarFg, should be *style.Color")
			}
			p.set(key, realValue)
			return nil
		}

		var translated *style.Color
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :replay-status-bar-fg: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamReplayTimeFg:
		if !janetOk {
			realValue, ok := value.(*style.Color)
			if !ok {
				return fmt.Errorf("invalid value for ParamReplayTimeFg, should be *style.Color")
			}
			p.set(key, realValue)
			return nil
		}

		var translated *style.Color
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :replay-time-fg: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamReplayVisualFg:
		if !janetOk {
			realValue, ok := value.(*style.Color)
			if !ok {
				return fmt.Errorf("invalid value for ParamReplayVisualFg, should be *style.Color")
			}
			p.set(key, realValue)
			return nil
		}

		var translated *style.Color
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :replay-visual-fg: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamSearchStatusBarBg:
		if !janetOk {
			realValue, ok := value.(*style.Color)
			if !ok {
				return fmt.Errorf("invalid value for ParamSearchStatusBarBg, should be *style.Color")
			}
			p.set(key, realValue)
			return nil
		}

		var translated *style.Color
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :search-status-bar-bg: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamSearchStatusBarFg:
		if !janetOk {
			realValue, ok := value.(*style.Color)
			if !ok {
				return fmt.Errorf("invalid value for ParamSearchStatusBarFg, should be *style.Color")
			}
			p.set(key, realValue)
			return nil
		}

		var translated *style.Color
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :search-status-bar-fg: %s", err)
		}
		p.set(key, translated)
		return nil

	case ParamSkipInput:
		if !janetOk {
			realValue, ok := value.(bool)
			if !ok {
				return fmt.Errorf("invalid value for ParamSkipInput, should be bool")
			}
			p.set(key, realValue)
			return nil
		}

		return fmt.Errorf(":---skip-input is a protected parameter")

	case ParamTimestampFormat:
		if !janetOk {
			realValue, ok := value.(string)
			if !ok {
				return fmt.Errorf("invalid value for ParamTimestampFormat, should be string")
			}
			p.set(key, realValue)
			return nil
		}

		var translated string
		err := janetValue.Unmarshal(&translated)
		if err != nil {
			janetValue.Free()
			return fmt.Errorf("invalid value for :timestamp-format: %s", err)
		}
		p.set(key, translated)
		return nil

	}
	return nil
}

func init() {
	_defaultParams = []DefaultParam{
		{
			Name:      "animate",
			Docstring: "Whether to enable animation.",
			Default:   defaults.Animate,
		},
		{
			Name:      "animations",
			Docstring: "A list of all of the enabled animations that will be used by\n(input/find). If this is an empty array, all built-in animations\nwill be enabled.",
			Default:   defaults.Animations,
		},
		{
			Name:      "data-directory",
			Docstring: "The directory in which .borg files will be saved. This is [inferred\non startup](/replay-mode.md#recording-to-disk). If\nset to an empty string, recording to disk is disabled.",
			Default:   defaults.DataDirectory,
		},
		{
			Name:      "default-frame",
			Docstring: "The frame used for all new clients. A blank string means a random\nframe will be chosen from all frames.",
			Default:   defaults.DefaultFrame,
		},
		{
			Name:      "default-shell",
			Docstring: "The default shell with which to start panes. Defaults to the value\nof `$SHELL` on startup.",
			Default:   defaults.DefaultShell,
		},
		{
			Name:      "num-search-workers",
			Docstring: "The number of goroutines to use for searching in .borg files.\nDefaults to the number of CPUs.",
			Default:   defaults.NumSearchWorkers,
		},
		{
			Name:      "remove-pane-on-exit",
			Docstring: "If this is `true`, when a pane's process exits or its node is killed\n(such as with {{api tree/kill}}), the portion of the layout related\nto that node will be removed. This makes cy's layout functionality\nwork a bit more like tmux.",
			Default:   defaults.RemovePaneOnExit,
		},
		{
			Name:      "replay-copy-fg",
			Docstring: "The [color](/api.md#color) used to represent copy mode.",
			Default:   defaults.ReplayCopyFg,
		},
		{
			Name:      "replay-play-fg",
			Docstring: "The [color](/api.md#color) used in time mode when the player is playing.",
			Default:   defaults.ReplayPlayFg,
		},
		{
			Name:      "replay-status-bar-bg",
			Docstring: "The background [color](/api.md#color) of the status bar in replay mode.",
			Default:   defaults.ReplayStatusBarBg,
		},
		{
			Name:      "replay-status-bar-fg",
			Docstring: "The foreground [color](/api.md#color) of the status bar in replay mode.",
			Default:   defaults.ReplayStatusBarFg,
		},
		{
			Name:      "replay-time-fg",
			Docstring: "The [color](/api.md#color) used to represent time mode.",
			Default:   defaults.ReplayTimeFg,
		},
		{
			Name:      "replay-visual-fg",
			Docstring: "The [color](/api.md#color) used to represent visual mode.",
			Default:   defaults.ReplayVisualFg,
		},
		{
			Name:      "search-status-bar-bg",
			Docstring: "The background [color](/api.md#color) of the status bar in search mode.",
			Default:   defaults.SearchStatusBarBg,
		},
		{
			Name:      "search-status-bar-fg",
			Docstring: "The foreground [color](/api.md#color) of the status bar in search mode.",
			Default:   defaults.SearchStatusBarFg,
		},
		{
			Name:      "timestamp-format",
			Docstring: "The format for all timestamps shown in cy. This uses Go's\ntime.Layout format described\n[here](https://pkg.go.dev/time#Layout).",
			Default:   defaults.TimestampFormat,
		},
	}
}
