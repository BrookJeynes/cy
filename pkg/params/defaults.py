import os
import re

from typing import (
    NamedTuple,
    List,
)

# https://stackoverflow.com/a/1176023
snake = re.compile(r'(?<!^)(?=[A-Z])')

class Default(NamedTuple):
    Name: str
    Constant: str
    Snake: str
    Type: str


def get_defaults(path: str, line_number: int) -> List[Default]:
    lines = open(path, 'r').read().split('\n')[line_number+1:]

    defaults: List[Default] = []
    for line in lines:
        if '}' in line: break
        if '//' in line or not line: continue
        name, type_ = line.strip().split(" ")
        defaults.append(Default(
            Name=name,
            Constant="Param" + name,
            Type=type_,
            Snake=snake.sub('-', name).lower(),
        ))

    return defaults


def generate(package: str, defaults: List[Default]) -> str:
    text = f"""// Code generated by defaults.py; DO NOT EDIT.
package {package}

import (
    "fmt"

    "github.com/cfoust/cy/pkg/janet"
)
"""

    text += "const (\n"
    for default in defaults:
        text += f"\t{default.Constant} = \"{default.Snake}\"\n"
    text += ")\n"

    # Each default has a getter and a setter for use from Go code
    for default in defaults:
        text += f"""
func (p *Parameters) {default.Name}() {default.Type} {{
    value, ok := p.Get({default.Constant})
    if !ok {{
        return defaults.{default.Name}
    }}

    realValue, ok := value.({default.Type})
    if !ok {{
        return defaults.{default.Name}
    }}

    return realValue
}}

func (p *Parameters) Set{default.Name}(value {default.Type}) {{
    p.set({default.Constant}, value)
}}
"""

    text += """
func (p *Parameters) isDefault(key string) bool {
    switch key {"""
    for default in defaults:
        text += f"""
        case {default.Constant}:
            return true"""
    text += """
    }
    return false
}
"""

    text += """
func (p *Parameters) setDefault(key string, value interface{}) error {
    switch key {"""
    for default in defaults:
        text += f"""
        case {default.Constant}:
            janetValue, ok := value.(*janet.Value)
            if !ok {{
                realValue, ok := value.({default.Type})
                if !ok {{
                    return fmt.Errorf("invalid value for {default.Constant}, should be {default.Type}")
                }}
                p.set(key, realValue)
                return nil
            }}

            var translated {default.Type}
            err := janetValue.Unmarshal(&translated)
            if err != nil {{
                janetValue.Free()
                return fmt.Errorf("invalid value for :{default.Snake}: %s", err)
            }}
            p.set(key, translated)
            return nil"""
    text += """
    }
    return nil
}
"""

    return text


if __name__ == "__main__":
    defaults = get_defaults(
        os.environ['GOFILE'],
        int(os.environ['GOLINE']),
    )

    with open("defaults_gen.go", "w") as f:
        f.write(generate(os.environ['GOPACKAGE'], defaults))
